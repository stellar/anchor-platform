openapi: 3.0.0
info:
  description: The Platform API specification for the Stellar Anchor Platform project.
  version: "1.0"
  title: Platform API
tags:
  - name: "Transactions"
    description: "Transactions initiated by client applications via SEP APIs"
  - name: "Quotes"
    description: "Firm quotes provided to client applications via SEP APIs"
paths:
  /transactions:
    get:
      tags:
        - "Transactions"
      summary: Fetchs all transactions initiated by client applications
      operationId: getTransactions
      description: |
        Provides the information necessary for the business to determine the state of each transaction, decide if any 
        action must be taken to continue processing each transaction, and act on those decisions.
      parameters:
        - in: query
          name: sep
          description: The SEP number for the protocol used to initiate this transaction.
          required: false
          schema:
            type: integer
            enum: [31]
        - in: query
          name: order
          description: Either ascending or descending by `order_by` value.
          required: false
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "desc"
        - in: query
          name: order_by
          description: The data to be used for ordering transactions.
          schema:
            type: string
            enum: ["started_at", "completed_at", "transfer_received_at"]
            default: "started_at"
        - in: query
          name: cursor
          description:
            The cursor used for pagination. Each response will include a `cursor` value that can be used to
            view the next page, assuming all other parameters kept the same.
          required: false
          schema:
            type: string
        - in: query
          name: after
          description: Timestamp for which all `order_by` values will be after (exclusive), in UTC.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: before
          description: Timestamp for which all `order_by` values will be before (exclusive), in UTC.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: status
          description: Status of the transaction.
          required: false
          schema:
            type: string
            enum: [
              "pending_sender",
              "pending_stellar",
              "pending_customer_info_update",
              "pending_receiver",
              "pending_external",
              "completed",
              "expired",
              "error"
            ]
      responses:
        '200':
          description: valid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  cursor:
                    type: string
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                  - error
    patch:
      tags:
        - "Transactions"
      summary: Accepts updated information on transactions.
      operationId: patchTransactions
      description:
        Accepts one or more objects containing updated information on transactions. Note that requests containing 
        invalid data for any transaction will result in a 400 Bad Request and no transactions will be updated. Note
        that this endpoint accepts a subset of transaction information defined in the `PatchTransaction` schema.
      responses:
        '200':
          description: Transaction(s) updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
        '400':
          description: 'Invalid request body. The error returned pertains to the transaction first determined to be invalid.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  id:
                    type: string
                    description: The `id` of the transaction first determined to be invalid.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                records:
                  type: array
                  items:
                    $ref: '#/components/schemas/PatchTransaction'
  /transactions/{id}:
    get:
      tags:
        - "Transactions"
      summary: Fetches a single transaction.
      operationId: getTransaction
      description:
        Provides the information necessary for the business to determine the state of the transaction identified by 
        `id`, decide if any action must be taken to continue processing the transaction, and act on the decision.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "Transaction found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: "Transaction not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/quotes:
    get:
      tags:
        - Quotes
      summary: Fetches the quotes provided to client applications.
      operationId: getQuotes
      description:
        Only relevant for SEP-38 (used by SEP-31). Fetches the quotes that were created by client applications using 
        SEP-38's `POST /quote` endpoint.
      parameters:
        - in: query
          name: order
          description: Either ascending or descending by `order_by` value.
          required: false
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "desc"
        - in: query
          name: order_by
          description: The data to be used for ordering transactions.
          required: false
          schema:
            type: string
            enum: ["created_at", "expires_at", "used_at"]
            default: "created_at"
        - in: query
          name: cursor
          description:
            Cursor used for pagination. Each response will include a `cursor` value that can be used to view 
            the next page, assuming all other parameters kept the same.
          required: false
          schema:
            type: string
        - in: query
          name: after
          description: Timestamp for which all `order_by` values will be after (exclusive), in UTC.
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: before
          description: Timestamp for which all `order_by` values will be before (exclusive), in UTC.
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/Quote'
                  cursor:
                    type: string
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /exchange/quotes/{id}:
    get:
      tags:
        - Quotes
      summary: Fetch a single quote provided to a client application.
      operationId: getQuote
      description:
        Only relevant for SEP-38 (used by SEP-31). Fetches the quote that ascreated by a client application using 
        SEP-38's `POST /quote` endpoint.
      parameters:
        - in: path
          name: id
          description: The ID returned as a result of creating the quote via SEP-38's `POST /quote` endpoint.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "Success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'
        '404':
          description: "Not Found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: string
        sep:
          type: integer
          enum: [31]
        kind:
          type: string
          enum: ["receive"]
        status:
          type: string
          enum: [
            "pending_sender",
            "pending_stellar",
            "pending_customer_info_update",
            "pending_receiver",
            "pending_external",
            "completed",
            "error"
          ]
        amount_expected:
          $ref: '#/components/schemas/Amount'
        amount_in:
          $ref: '#/components/schemas/Amount'
        amount_out:
          $ref: '#/components/schemas/Amount'
        amount_fee:
          $ref: '#/components/schemas/Amount'
        quote_id:
          type: string
        started_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        transfer_received_at:
          type: string
          format: date-time
        message:
          type: string
        refunds:
          $ref: '#/components/schemas/Refunds'
        stellar_transactions:
          type: array
          items:
            $ref: '#/components/schemas/StellarTransaction'
        external_transaction_id:
          type: string
        custodial_transaction_id:
          type: string
        customers:
          type: object
          description: |
            The Identification info of the sending and receiving customers. If they were created through [SEP-12](https://stellar.org/protocol/sep-12),
            this object should contain the SEP-12 customer `id`. Otherwise, the `account` address of the customer.
          properties:
            sender:
              $ref: '#/components/schemas/StellarId'
            receiver:
              $ref: '#/components/schemas/StellarId'
        creator:
          $ref: '#/components/schemas/StellarId'
    PatchTransaction:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        status:
          type: string
          enum: [
            "pending_stellar",
            "pending_customer_info_update",
            "pending_receiver",
            "pending_external",
            "completed",
            "error"
          ]
        amount_in:
          $ref: '#/components/schemas/Amount'
        amount_out:
          $ref: '#/components/schemas/Amount'
        amount_fee:
          $ref: '#/components/schemas/Amount'
        transfer_received_at:
          type: string
          format: date-time
        message:
          type: string
        refund:
          $ref: '#/components/schemas/Refunds'
        external_transaction_id:
          type: string
    Amount:
      type: object
      required:
        - amount
        - asset
      properties:
        amount:
          type: string
        asset:
          type: string
    Refunds:
      type: object
      properties:
        amount_refunded:
          $ref: '#/components/schemas/Amount'
        amount_fee:
          $ref: '#/components/schemas/Amount'
        payments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              id_type:
                type: string
                enum:
                  - stellar
                  - external
              amount:
                $ref: '#/components/schemas/Amount'
              fee:
                $ref: '#/components/schemas/Amount'
              requested_at:
                type: string
                format: date-time
              refunded_at:
                type: string
                format: date-time
    Quote:
      type: object
      properties:
        id:
          type: string
        sell_asset:
          type: string
        buy_asset:
          type: string
        expires_at:
          type: string
          format: date-time
        price:
          type: string
        creator:
          $ref: '#/components/schemas/StellarId'
        transaction_id:
          type: string
        created_at:
          type: string
          format: date-time
    StellarId:
      type: object
      description: |
        StellarId's are objects that identify end-users and SEP-31 Sending Anchors, but not SEP-31 Receiving Anchors.

        For a SEP-12 customer, the `id` field should be sufficient to fully identify the customer in the Anchor Backend.
        
        For a SEP-31 Sending Anchor, the `account` field should be used.
      properties:
        id:
          type: string
          description: The `id` of the customer registered through SEP-12.
        account:
          type: string
          description: Either the Stellar account or Muxed account address of the on-chain entity.
    StellarTransaction:
      type: object
      required:
        - id
        - created_at
        - envelope
        - payments
      properties:
        id:
          type: string
          description: The ID of the transaction in the Stellar network.
        memo:
          type: string
          description: The memo of the transaction in the Stellar network.
        memo_type:
          type: string
          description: The memo type of the transaction in the Stellar network. Should be present if memo is not null.
          enum:
            - text
            - hash
            - id
        created_at:
          type: string
          format: date-time
          description: The time the transaction was registered in the Stellar network.
        envelope:
          type: string
          description: The transaction envelope, containing all the transaction information.
        payments:
          type: array
          items:
            type: object
            required:
              - id
              - payment_type
              - source_account
              - destination_account
              - amount
            properties:
              id:
                type: string
                description: The ID of the payment in the Stellar Network.
              payment_type:
                type: string
                description: The type of payment in the Stellar Network.
                enum:
                  - payment
                  - path_payment
                default: payment
              source_account:
                type: string
                description: The account being debited in the Stellar Network.
              destination_account:
                type: string
                description: The account being credited in the Stellar Network.
              amount:
                $ref: '#/components/schemas/Amount'
    Error:
      type: object
      properties:
        error:
          type: string
        id:
          type: string
      required:
        - error