stellar:
  anchor:
    # Configure the application from this file after it is loaded in memory
    # If `config` is in-memory, the yaml file contains all settings for the server.
    config: in-memory
    app-config:
      type: config-spring-property                # Activate [config-spring-property] module
      settings: app-config                        # The location of the configuration data
    data-access:
      type: data-spring-jdbc                      # Activate [config-spring-jdbc] module.
      settings: data-spring-jdbc-sqlite           # The location of the configuration data in this file.
    logging:
      type: logging-logback
      settings: logging-logback-settings

#
# Application settings
#
app-config:
  # general
  app:
    stellarNetworkPassphrase: Test SDF Network ; September 2015
    hostUrl: http://localhost:8080
    languages: en
    horizonUrl: https://horizon-testnet.stellar.org
    assets: assets-test.json
    jwtSecretKey: secret

  # sep-1
  sep1:
    enabled: true
    #
    # The stellarFile is the location where to retrieve the content as the return value
    # of the `/.well-known/stellar.toml`.
    #
    # The format of the resource is specified as Table 6.1 of the Spring document located at:
    # https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/resources.html
    #
    stellarFile: classpath:sep1/stellar-wks.toml

  # sep-10
  sep10:
    enabled: true
    homeDomain: localhost:8080
    clientAttributionRequired: false
    clientAttributionAllowList: lobstr.co,preview.lobstr.co # use this if we want to white list
    # clientAttributionDenyList: # use this if we want to black list.
    authTimeout: 900
    jwtTimeout: 86400
    signingSeed: SAX3AH622R2XT6DXWWSRIDCMMUCCMATBZ5U6XKJWDO7M2EJUBFC3AW5X

  # sep-12
  sep12:
    enabled: true
    customerIntegrationEndpoint: http://localhost:8081

  # sep-24
  sep24:
    enabled: true
    interactiveJwtExpiration: 3600
    interactiveUrl: http://localhost:8081/sep24/interactive

  # sep-31
  sep31:
    enabled: true
    feeIntegrationEndPoint: http://localhost:8081
    #
    # paymentType: used to determine how amount_in is calculated from amount in the POST /transaction call
    # Possible values: STRICT_SEND or STRICT_RECEIVE. default=STRICT_SEND
    #     STRICT_SEND: amount_in = amount
    #     STRICT_RECEIVE: amount_in = amount + fee
    paymentType: STRICT_SEND

  # sep-38
  sep38:
    enabled: true
    quoteIntegrationEndPoint: http://localhost:8081

  payment-gateway:
    #
    # Payment Circle configurations
    #
    circle:
      name: "circle"
      enabled: true
      circleUrl: https://api-sandbox.circle.com
      secretKey: secret # circle API key
      horizonUrl: https://horizon-testnet.stellar.org
      stellarNetwork: TESTNET

    #
    # Payment Stellar configurations
    #
    stellar:
      enabled: false
      name: "stellar"
      horizonUrl: https://horizon-testnet.stellar.org
      secretKey: secret # stellar account secret key

  circle-payment-observer:
    enabled: true
    horizonUrl: https://horizon-testnet.stellar.org
    stellarNetwork: TESTNET # TESTNET or PUBLIC
    trackedWallet: all

  event:
    # If enabled, publish Events to a queue (publisherType)
    # publisherType - the type of queue to use for event publishing
    enabled: true
    publisherType: kafka

  kafka.publisher:
    # kafkaBootstrapServer - the Kafka server used to bootstrap setup
    # If useSingleQueue, all events are published to a single queue
    #   (specified in eventTypeToQueue.all)
    # eventTypeToQueue - a map of the event type to the queue name messages are published to
    bootstrapServer: localhost:29092
    useSingleQueue: false
    eventTypeToQueue:
      all: ap_event_single_queue
      quote_created: ap_event_quote_created
      transaction_created: ap_event_transaction_created
      transaction_payment_received: ap_event_transaction_payment_received
      transaction_error: ap_event_transaction_error

  sqs.publisher:
    # region - AWS region for the SQS queue
    # accessKey - AWS access key used to publish events to SQS
    # secretKey - AWS secret key to be used with the accessKey
    region: us-east-1
    useSingleQueue: false
    eventTypeToQueue:
      all: sdf_dev_ap_event_single_queue.fifo
      quote_created: sdf_dev_ap_event_quote_created.fifo
      transaction_created: sdf_dev_ap_event_transaction_created.fifo
      transaction_payment_received: sdf_dev_ap_event_transaction_payment_received.fifo
      transaction_error: sdf_dev_ap_event_transaction_error.fifo
    accessKey: <ACCESS_KEY>
    secretKey: <SECRET_KEY>

#
# Spring Data JDBC settings
#
data-spring-jdbc-sqlite:
  spring.jpa.database-platform: org.stellar.anchor.platform.sqlite.SQLiteDialect
  spring.jpa.hibernate.ddl-auto: update
  spring.jpa.generate-ddl: true
  spring.jpa.hibernate.show_sql: false
  spring.datasource.url: jdbc:sqlite:anchor-proxy.db
  spring.datasource.driver-class-name: org.sqlite.JDBC
  spring.datasource.username: admin
  spring.datasource.password: admin
  spring.mvc.converters.preferred-json-mapper: gson

data-spring-jdbc-h2:
  spring.datasource.url: jdbc:h2:mem:test
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.H2Dialect

#
# Spring framework configurations
#
spring:
  logging:
    level:
      root: INFO
      org.springframework: INFO
      org.springframework.web.filter: INFO
      org.stellar: INFO
  mvc:
    async.request-timeout: 6000
