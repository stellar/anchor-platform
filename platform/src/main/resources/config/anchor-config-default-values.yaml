####################################################################################################
## Anchor Platform - Default Configuration
##
## Values not defined in the user config use the default values defined here.
####################################################################################################

version: 1

##############################
## Application Configuration
##############################

## @param: host_url
## @type: string
## @supported_prefixes: http:, https:
## The anchor platform host url.
#
host_url: http://localhost:8080

stellar_network:
  ## @param: network
  ## Whether to use testnet (TESTNET) or pubnet (PUBNET)
  #
  network: TESTNET

  ## @param: network_passphrase
  ## @type: string
  ## The stellar network passphrase used to access Horizon server.
  ## For pubnet: use 'Public Global Stellar Network ; September 2015'
  ## For testnet: use 'Test SDF Network ; September 2015'
  #
  network_passphrase: Test SDF Network ; September 2015

  ## @param: horizon_url
  ## @type: string
  ## A horizon server endpoint.
  ## @required_secret:
  ##     PAYMENT_GATEWAY_STELLAR_SECRET_KEY - stellar account secret key
  #
  horizon_url: https://horizon-testnet.stellar.org


callback_api:
  ## @param: baseUrl
  ## @type: string
  ## @supported_prefixes: http:, https:
  ## The base URL of the Anchor Backend server that implements the callback API endpoints described in the
  ## "Callbacks API.yml" spec, which are: `/customer`, `/fee`, `/rate, and `/unique_address`.
  #
  base_url: http://localhost:8081

  ## If the flag is set to false, all certificates from the business servers will be trusted.
  check_certificate: false

  ## Authentication config for Anchor server and Anchor Platform server to safely communicate,
  ## particularly when housed in different clusters.
  ## The receiving party should verify that an incoming request token is still valid.
  #
  auth:
    ## @param: type
    ## @supported_values: none, api_key, jwt
    ##     none: no authentication is used
    ##     api_key: The authentication is done using an API key added to the HTTP request header.
    ##     jwt: The authentication is done using a JWT token added to the `Authorization` header. This token is
    ##          generated from the secret key.
    ##
    ## If the type is not NONE, the secret must be set by the environment variable `secret.callback_api.auth_secret`.
    ## If the type is api_key, the secret will be used as the api_key.
    ## If the type is jwt, the secret will be used as the jwt shared secret.
    ##
    ## Secrets are shared on both sides (Platform and Anchor) and are used in CallbackAPI
    ## requests (`Platform->Anchor`) so the Anchor can ensure the party making the request
    ## is the Platform
    #
    type: none

    jwt:
      expiration_milliseconds: 30000
      http_header: Authorization

    api_key:
      http_header: X-Api-Key

platform_api:
  ## @param: baseUrl
  ## @type: string
  ## @supported_prefixes: http:, https:
  ## The base URL of the Anchor Platform server that implements the platform API endpoints described in the
  ## "Platform API.yml" spec.
  #
  base_url: http://localhost:8080
  ## Authentication config for Anchor server and Anchor Platform server to safely communicate,
  ## particularly when housed in different clusters.
  ## The receiving party should verify that an incoming request token is still valid.
  #
  auth:
    ## @param: type
    ## @supported_values: none, api_key, jwt
    ##     none: no authentication is used
    ##     api_key: The authentication is done using an API key added to the HTTP request header.
    ##     jwt: The authentication is done using a JWT token added to the `Authorization` header. This token is
    ##          generated from the secret key.
    ##
    ## If the type is not NONE, the secret must be set by the environment variable `secret.callback_api.auth_secret`.
    ## If the type is api_key, the secret will be used as the api_key.
    ## If the type is jwt, the secret will be used as the jwt shared secret.
    ##
    ## Secrets are shared on both sides (Platform and Anchor) and are used in CallbackAPI
    ## requests (`Platform->Anchor`) so the Anchor can ensure the party making the request
    ## is the Platform
    #
    type: none

    jwt:
      expiration_milliseconds: 30000
      http_header: Authorization

    api_key:
      http_header: X-Api-Key

payment_observer:
  # The context path of the Stellar observer server
  context_path: /

  # The listening port of the Stellar observer server
  port: 8083

  ## @param: type
  ## @type: string
  ## @supported_values:
  ##    `stellar`: the observer will observer transactions from the Stellar network
  #
  type: stellar
  stellar:
    #
    # The interval in seconds when the silence check will run.  
    silence_check_interval: 5
    
    # The silence_timeout in seconds.
    #
    # If the observer had been silent for longer than the timeout value, the observer will try to reconnect to the stellar network.
    silence_timeout: 90

    # The maximum number of silence timeout retries before the observer will give up.
    # Setting the silence_timeout_retires to -1 will result in indefinite retires.
    silence_timeout_retries: 5
    
    # The initial backoff (cool-down) time (in seconds) before reconnecting to the Stellar network 
    initial_stream_backoff_time: 5
    
    # The maximum backoff (cool-down) time (in seconds) before reconnecting to the Stellar network 
    max_stream_backoff_time: 300
    
    # The initial backoff (cool-down) time (in seconds) before reconnecting to the event publisher 
    initial_event_backoff_time: 5
    
    # The initial backoff (cool-down) time (in seconds) before reconnecting to the event publisher 
    max_event_backoff_time: 300


event_processor:
  # The context path of the event processing server
  context_path: /

  # The listening port of the event processing server
  port: 8084

  # The queue where the event processor will
  queue:
    type: kafka
    kafka:
      bootstrap_server: localhost:29092
      event_type_to_topic:
        all: dev_ap_event_single_queue
        quote_created: ap_event_quote_created
        transaction_created: ap_event_transaction_created
        transaction_status_updated: ap_event_transaction_status_changed
        transaction_error: ap_event_transaction_error

## @param: languages
## @supported_values: en
## The supported languages defined by RFC4646 (https://datatracker.ietf.org/doc/html/rfc4646)
#
languages: en

logging:
  ## @param: level
  ## @type: string
  ## The root logger logging level
  level: INFO

  ## @param: level
  ## @type: string
  ## The "org.stellar" logger logging level.
  stellar_level: INFO

######################
## SEP configuration
######################
sep_server:
  # The context path of the SEP server
  context_path: /

  # The listening port of the SEP server
  port: 8080

  # the management server port
  management_server_port: 8082

sep1:

  ## @param: enabled
  ## @type: bool
  ## Whether to enable SEP-1 for this instance of AP server.
  #
  enabled: false

  toml:
    ## @param: type
    ## @type: string
    ## @supported_values:
    ##     `string`: value contains the content of the stellar toml file
    ##     `file`: value contains the path to the stellar toml file
    ##     `url`: value contains the url to the content of the stellar toml file
    type: string

    ## @param: value
    ## @type: string
    #
    value: |


sep10:

  ## @param: enabled
  ## @type: bool
  ## Whether to enable SEP-10 for this instance of AP server.
  ## If true, @required_secrets: SEP10_SIGNING_SEED
  #
  enabled: false

  ## If `enabled` is set to True, the following two secrets must be set via the environment
  ## variables.
  ## `secret.sep10_signing_seed`: The private key for signing challenge transactions.
  ## `secret.sep10_jwt_secret`: The JWT encryption key.
  #

  ## @param: home_domain
  ## @type: string
  ## The `home_domain` property of SEP-10. https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#request
  #
  home_domain: localhost:8080

  ## @param: client_attribution_required
  ## @type: bool
  ## Set if the client attribution is required. Client Attribution requires clients to verify their identity by passing
  ## a domain in the challenge transaction request and signing the challenge with the ``SIGNING_KEY`` on that domain's
  ## SEP-1 stellar.toml. See the SEP-10 section `Verifying Client Application Identity` for more information
  ## (https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#verifying-client-application-identity).

  #
  client_attribution_required: false

  ## @param: client_attribution_allow_list
  ## Set the white list of the client domain. The domains are comma-separated.
  #
  client_attribution_allow_list:

  ## @param: client_attribution_deny_list
  ## Set the black list of the client domain. The domains are comma-separated.
  #
  client_attribution_deny_list:

  ## @param: auth_timeout
  ## @type: integer
  ## Set the authentication challenge transaction timeout in seconds. An expired signed transaction will be rejected.
  ## This is the timeout period the client must finish the authentication process. (ie: sign and respond the challenge
  ## transaction).
  #
  auth_timeout: 900

  ## @param: jwt_timeout
  ## @type: integer
  ## Set the timeout in seconds of the authenticated JSON Web Token. An expired JWT will be rejected.
  ## This is the timeout period after the client has authenticated.
  #
  jwt_timeout: 86400

  ## @param: omnibus_account_list
  ## A comma-separated list of omnibus accounts (comma separated).
  ## The SEP-10 omnibus account is described at:
  ##     https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#memos
  #
  omnibus_account_list:

  ## @param: require_known_omnibus_account
  ## @type: bool
  ## Whether to require authenticating clients to be in the omnibusAccountList
  #
  require_known_omnibus_account: false

sep12:

  ## @param: enabled
  ## @type: bool
  ## Whether to enable SEP-12 for this instance of AP server.
  #
  enabled: false

sep24:
  ## SEP24 in experimental.

  ## @param: enabled
  ## @type: bool
  ## Whether to enable SEP-24 for this instance of AP server.
  #
  enabled: false

  ## @param: interactive_jwt_expiration
  ## @type: integer
  ## Set the timeout in seconds of the JSON Web Token returned with the embedded interactive url of the SEP-24 process.
  ## An expired JWT will be rejected.
  ##
  ## If the interactive flow needs to access the platform server, the interactive process must finish within
  ## the specified timeout period.
  #
  interactive_jwt_expiration: 3600

  ## @param: interactive_url
  # Configures the interactive URL where the platform server will redirect to start the SEP-24 interactive flow.
  # If the type is `simple`, sep24.interactive_url.simple will be read to construct the url.
  #   base_uri: is the base_uri used to construct the interactive url
  #   txn_fields: is the list of transaction fields that will be appended to the interactive url as query parameters
  #   In addition to the txn_fields, the following fields are also added to the query parameters.
  #       `transaction_id`: the transaction ID
  #       `token`: the JWT token
  #       `lang`: the lang request parameter and
  #       any defined SEP-9 fields fromt he request parameters.
  interactive_url:
    type: simple
    simple:
      base_url: http://localhost:8080/sep24/interactive
      txn_fields: status, kind, amount_in, amount_in_asset

  ## @param: more_info_url
  # Configures the more_info_url of the transaction response when calling GET /transaction and GET /transactions endpoints.
  # For details, please refer to https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0024.md#shared-fields-for-both-deposits-and-withdrawals
  #
  # If the type is `simple`, sep24.more_info_url.simple will be read to construct the url.
  #   base_uri: is the base_uri used to construct the more_info_url
  #   txn_fields: is the list of transaction fields that will be appended to the interactive url as query parameters
  #   jwt_expiration: the JWT expiration in seconds
  #   In addition to the txn_fields, the following fields are also added to the query parameters.
  #       `transaction_id`: the transaction ID
  #       `token`: the JWT token
  more_info_url:
    type: simple
    simple:
      base_url: http://localhost:8080/sep24/transaction/more_info
      txn_fields: kind, amount_in, amount_in_asset
      jwt_expiration: 600

sep31:

  ## @param: enabled
  ## @type: bool
  ## Whether to enable SEP-31 for this instance of AP server.
  #
  enabled: false

  ## @param: payment_type
  ## @default: STRICT_SEND
  ## Used to determine how amount_in is calculated from amount in the POST /transaction call
  ## @supported_values:
  ##     STRICT_SEND: amount_in = amount
  ##     STRICT_RECEIVE: amount_in = amount + fee
  payment_type: STRICT_SEND

  ## @param: deposit_info_generator_type
  ## @default: self
  ## Used to choose how the SEP-31 deposit information will be generated, which includes the
  ##     deposit address, memo and memo type.
  ## @supported_values:
  ##     self: the memo and memo type are generated in the local code, and the distribution account is used for the deposit address.
  ##     circle: the memo and memo type are generated through Circle API, as well as the deposit address.
  ##     api: the memo and memo type are generated through calling the anchor's GET /unique_address endpoint.
  #
  deposit_info_generator_type: self

sep38:
  ## @param: enabled
  ## @type: bool
  ## Whether to enable SEP-38 for this instance of AP server.
  #
  enabled: false


##########################
## Metrics Configuration
##########################
## The metrics are exposed at the port specified by sep_server.management_server_port
metrics:
  ## @param: enabled
  ## @type: bool
  ## If true, enable metrics endpoints for third-party services (ex: prometheus) to scrape
  #
  enabled: false

  ## @param: extras_enabled
  ## @type: bool
  ## If true, enable extra metrics (these metrics periodically query the database to get the current state of the
  ## system)
  #
  extras_enabled: false

  ## @param: run_interval
  ## @type: integer
  ## Interval in seconds to query the database to generate metrics
  #
  run_interval: 30


#########################
## Events Configuration.
#########################
## The events being sent from the platform are the ones described in the `Events Schema.yml` file
events:
  ## @param: enabled
  ## @type: bool
  ## Whether to enable events.
  #
  enabled: false

  ## @param: event_type_to_queue
  ## @type: map
  ## Mapping of the event type to the queue name that messages are published to
  event_type_to_queue:
    quote_created: ap_event_quote_created
    transaction_created: ap_event_transaction_created
    transaction_status_changed: ap_event_transaction_status_changed
    transaction_error: ap_event_transaction_error

  ## @param: publisher_type
  ## @supported_values: `kafka`, `sqs`, or `msk`
  ## The type of queue to use for event publishing
  #
  publisher:
    type: kafka

    ## If the value of `events.publisher.type` is "kafka", the `events.publisher.kafka` field must be defined.
    kafka:
      ## @param: bootstrap_server
      ## @type: string
      ## A comma-separated list of host:port pairs that are the addresses of one or more brokers in a Kafka cluster,
      ## e.g. localhost:9092 or localhost:9092,another.host:9092.
      #
      bootstrap_server: localhost:29092
      # The client ID. If left empty, it is randomly generated.
      client_id:
      # Determines how many times the producer will attempt to send a message before marking it as failed.
      retries: 1
      # Determines the time to wait before sending messages out to Kafka.
      linger_ms: 1000
      # Determines the maximum amount of data to be collected before sending the batch.
      batch_size: 10

    ## If the value of `publisher.type` is "sqs", the `events.publisher.sqs` field must be defined.
    sqs:
      ## @param: use_IAM
      ## @type: boolean
      ## Use IAM authentication for AWS MSK or AWS SQS.
      ## SQS FIFO queues should be pre-created in AWS (Anchor Platform will not create them)
      ## If true, please follow the `Set up AWS Credentials and Region for Development`
      ## at https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
      #
      use_IAM: false

      ## @param: region
      ## @type: string
      ## AWS region for the queue. Can also be defined as environment variable: AWS_REGION
      #
      aws_region: us-east-1

    ## If the value of `publisher.type` is "msk", the `events.publisher.msk` field must be defined.
    msk:
      ## @param: use_IAM
      ## @type: boolean
      ## Use IAM authentication for AWS MSK or AWS SQS.
      ## SQS FIFO queues should be pre-created in AWS (Anchor Platform will not create them)
      ##
      ## If true, please follow the `Set up AWS Credentials and Region for Development`
      ## at https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
      #
      use_IAM: false

      ## @param: bootstrap_server
      ## @type: string
      ## The Kafka server used to bootstrap setup in AWS
      ## AWS credentials.
      ## https://docs.aws.amazon.com/msk/latest/developerguide/port-info.html
      #
      bootstrap_server: # b-1-public.democluster1.w7j4hi.c25.kafka.us-east-1.amazonaws.com:9198
      # The client ID. If left empty, it is randomly generated.
      client_id:
      # Determines how many times the producer will attempt to send a message before marking it as failed.
      retries: 1
      # Determines the time to wait before sending messages out to Kafka.
      linger_ms: 1000
      # Determines the maximum amount of data to be collected before sending the batch.
      batch_size: 10

#########################
## Assets Configuration
#########################
## Assets are empty by default. Please see `integration-test.anchor-config.yaml` for reference.
## Accepts file reference (eg. 'file:assets.yaml') or in-line definition.
assets:
  ## @param: type
  ## @supported_values: `json`
  ## Describe the asset definition.
  #
  type: json

  ## @param: value
  ## @type: string
  ## Example of yaml definition:
  ##   { "assets":
  ##     [{
  ##       "schema": "stellar"
  ##       "code": "USDC"
  ##       "issuer": "G..."
  ##       "distribution_account": "G..."
  ##        ....
  ##     }]
  ##   }
  #
  value: ""


################################
## Data Configuration
################################
data:

  ## DB credentials are specified in @environment_variables SECRET_DATA_USERNAME, SECRET_DATA_PASSWORD

  ## @param: type
  ## @supported_values:
  ##    `h2` (in-memory), `sqlite` (local), `postgres` (local), `aurora` (postgres on AWS)
  ## Type of storage.
  ## If this is set to `aurora`, please follow the `Set up AWS Credentials and Region for Development`
  ## at https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
  #
  #
  type: h2

  ## @param: url
  ## @type: string
  ## Location of the database
  #
  url: jdbc:h2:mem:anchor-platform


  ## @param: initial_connection_pool_size
  ## @type: integer
  ## Initial number of connections
  ## For `sqlite`, set this to 1 to avoid database file lock exception
  #
  initial_connection_pool_size: 1

  ## @param: max_active_connections
  ## @type: integer
  ## Maximum number of db active connections
  ## For `sqlite`, set this to 1 to avoid database file lock exception
  #
  max_active_connections: 10

  ## @param: flyway_enabled
  ## @type: bool
  ## Whether to enable flyway.
  ## Should be disabled for `sqlite` because certain features that flyway uses
  ## (ex: addForeignKeyConstraint) are not supported.
  #
  flyway_enabled: false

  ## @param: ddl_auto
  ## @supported_values:
  ##      `none`:	      (default) No database Schema initialization
  ##      `create`:	      Drops and creates the schema at the application startup. With this option, all your data will be gone on each startup.
  ##      `create-drop`:  Creates schema at the startup and destroys the schema on context closure. Useful for unit tests.
  ##      `validate`:	  Only checks if the Schema matches the Entities. If the schema doesn't match, then the application startup will fail. Makes no changes to the database.
  ##      `update`:	      Updates the schema only if necessary. For example, If a new field was added in an entity, then it will simply alter the table for a new column without destroying the data.
  ## This value will be used to configure `spring.jpa.hibernate.ddl-auto` in non-memory databases like SQLite, Postgres, etc.
  ## ATTENTION: it should not be used in production!
  #
  ddl_auto: none

  ## @param: flyway_enabled
  ## @type: string
  ## Location on disk where migrations are stored if flyway is enabled.
  #
  flyway_location: /db/migration

  ## @param: hikari_max_lifetime
  ## @type: integer
  ## Maximum connection time before expiration
  ## Only valid when database `type` is `aurora`.
  ## Recommended setting is 14 minutes because IAM tokens are valid for 15 min.
  #
  # hikari_max_lifetime: 840000

