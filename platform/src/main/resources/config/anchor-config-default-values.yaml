####################################################################################################
## Anchor Platform - Default Configuration
##
## Values not defined in the user config use the default values defined here.
####################################################################################################

version: 1

##############################
# Application Configuration
##############################

#
# The default language of the application
# The supported languages defined by RFC4646 (https://datatracker.ietf.org/doc/html/rfc4646)
#
languages: en

app_logging:
  # The root logger logging level
  # The supported values are: TRACE, DEBUG, INFO, WARN, ERROR, FATAL
  level: INFO
  # The logging level of the classes under the "org.stellar" package.
  stellar_level: INFO
  # Enable/disable the request logger that logs all request body
  #   Setting the stellar_level to DEBUG will log the request URL
  #   Setting the stellar_level to TRACE will log the request body
  # Note: By enabling the logger, PII may be logged
  request_logger_enabled: false

##############################
# Stellar Network Configuration
##############################
stellar_network:
  # Use TESTNET or PUBLIC
  network: TESTNET

  # The horizon server endpoint.
  horizon_url: https://horizon-testnet.stellar.org

##############################
# Callback API Configuration
##############################
callback_api:
  # The base URL of the Anchor Backend server that implements the callback API endpoints described in the
  # `Callbacks API.yml` file.
  base_url: http://localhost:8081
  # If the flag is set to false, all certificates from the business servers will be trusted.
  check_certificate: false
  # Authentication config the anchor platform server to safely communicate with the business server.
  auth:
    #
    # `type` can be one of: none, api_key, jwt
    #     none: no authentication is used
    #     api_key: The authentication is done using an API key added to the HTTP request header.
    #     jwt: The authentication is done using a JWT token added to the `Authorization` header. This token is
    #          generated from the secret key.
    #
    # If the type is `api_key` or `jwt`, the secret must be set by the environment variable `secret.callback_api.auth_secret`.
    # If the type is api_key, the secret will be used as the api_key.
    # If the type is jwt, the secret will be used as the jwt shared secret.
    #
    # Secrets are shared on both sides (anchor platform and business server) and are used in `Callback API`
    # requests (`Platform->Anchor`) so the business server can ensure the party making the request is the anchor
    # platform server
    #
    type: none
    # The JWT authentication config, if the type is set to `jwt`
    jwt:
      # The JWT expiration in milliseconds
      expiration_milliseconds: 30000
      # The HTTP header name of the JWT token
      http_header: Authorization
    # The API key config, if the type is set to `api_key`
    api_key:
      # The HTTP header name of the API key
      http_header: X-Api-Key

##############################
# Platform API Configuration
##############################
platform_api:
  # The base URL of the Anchor Platform server that implements the platform API endpoints described in
  # the `Platform API.yml` spec.
  #
  base_url: http://localhost:8085
  # Authentication config the anchor platform server to safely communicate with the business server.
  auth:
    #
    # `type` can be one of: none, api_key, jwt
    #     none: no authentication is used
    #     api_key: The authentication is done using an API key added to the HTTP request header.
    #     jwt: The authentication is done using a JWT token added to the `Authorization` header. This token is
    #          generated from the secret key.
    #
    # If the type is `api_key` or `jwt`, the secret must be set by the environment variable `secret.callback_api.auth_secret`.
    # If the type is api_key, the secret will be used as the api_key.
    # If the type is jwt, the secret will be used as the jwt shared secret.
    #
    #
    # Secrets are shared on both sides (anchor platform and business server) and are used in `Platform API`
    # requests (`business server -> anchor platform`) so the anchor platform can ensure the party making the request
    # is the business server.
    #
    type: none
    # The JWT authentication config, if the type is set to `jwt`
    jwt:
      # The JWT expiration in milliseconds
      expiration_milliseconds: 30000
      # The HTTP header name of the JWT token
      http_header: Authorization
    # The API key config, if the type is set to `api_key`
    api_key:
      # The HTTP header name of the API key
      http_header: X-Api-Key

##############################
# Payment Observer Configuration
##############################
payment_observer:
  # The context path of the Stellar observer server
  context_path: /
  # The listening port of the Stellar observer server
  port: 8083
  # The management_server_port is the port used by Spring actuator.
  # https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html
  management_server_port: 9083
  #
  # The type of the observer.
  # Currently, only `stellar` is supported.
  #
  type: stellar
  #
  # The configuration of the stellar observer, if the type is set to `stellar`
  #
  stellar:
    # The interval in seconds when the silence check will run.
    silence_check_interval: 5
    # The silence_timeout in seconds.
    # If the observer had been silent for longer than the timeout value, the observer will try to reconnect to the stellar network.
    silence_timeout: 90
    # The maximum number of silence timeout retries before the observer will give up.
    # Setting the silence_timeout_retires to -1 will result in indefinite retires.
    silence_timeout_retries: 5
    # The initial backoff (cool-down) time (in seconds) before reconnecting to the Stellar network 
    initial_stream_backoff_time: 5
    # The maximum backoff (cool-down) time (in seconds) before reconnecting to the Stellar network 
    max_stream_backoff_time: 300
    # The initial backoff (cool-down) time (in seconds) before reconnecting to the event publisher 
    initial_event_backoff_time: 5
    # The initial backoff (cool-down) time (in seconds) before reconnecting to the event publisher 
    max_event_backoff_time: 300

##############################
# Event Processor Configuration
##############################
event_processor:
  # The context path of the event processing server
  context_path: /
  # The listening port of the event processing server
  port: 8088
  # The management_server_port is the port used by Spring actuator.
  # https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html
  management_server_port: 9088
  # The configuration of the status callback to the client domain
  client_status_callback:
    # Whether to enable the status callback to the client domain
    enabled: true
  # The configuration of the event delivery to the anchor business server
  callback_api_request:
    # Whether to enable the event delivery to the anchor business server
    enabled: true

##############################
# Anchor Platform Clients Configuration
##############################
# The list of clients for the Anchor server to safely communicate with the outside wallet servers or clients.
# Each item in the list may contain the following fields:
#   - name: (required) the name of the client
#   - type: (required) `custodial` or `noncustodial`
#
#   If the type is `custodial`,
#   - signing_keys: (required) the custodial SEP-10 signing keys of the client.
#   - callback_url: (optional) the URL of the client's callback API endpoint. Optional due to some wallets may opt to
#                  poll instead, or may use polling first before implementing callbacks at a later stage.
#   - allow_any_destination: (optional) default to false. If set to true, allows any destination for deposits.
#   - destination_accounts: (optional) list of accounts allowed to be used for the deposit. By default, only SEP-10
#                  authenticated account can be used to deposit funds into. If allows_any_destinations set to true,
#                  this configuration option is ignored.
#   If the type is `noncustodial`,
#   - domains: (required) the domain of the client.
#   - callback_url: (optional) the URL of the client's callback API endpoint
#
# Examples:
#     - name: circle
#       type: custodial
#       signing_keys: GBI2IWJGR4UQPBIKPP6WG76X5PHSD2QTEBGIP6AZ3ZXWV46ZUSGNEGN2,GACYKME36AI6UYAV7A5ZUA6MG4C4K2VAPNYMW5YLOM6E7GS6FSHDPV4F
#       callback_url: https://callback.circle.com/api/v1/anchor/callback
#     - name: lobstr
#       type: noncustodial
#       domains: lobstr.co,lobstr.com
#       callback_url: https://callback.lobstr.co/api/v2/anchor/callback
#     - name: vibrant
#       type: noncustodial
#       domain: vibrant.co
#       callback_url: https://callback.vibrant.com/api/v2/anchor/callback
clients:
#     - name:
#       type: custodial
#       signing_keys:
#       callback_url:
#       allow_any_destination:
#       destination_accounts:
#     - name:
#       type: noncustodial
#       domains:
#       callback_url:

######################
## Platform Server Configuration
######################
platform_server:
  # The context path of the Platform server
  context_path: /
  # The listening port of the Platform server
  port: 8085
  # The management_server_port is the port used by Spring actuator.
  # https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html
  management_server_port: 9085
  # Defines the authentication requirements of the platform_api requests. This is used to ensure that the requests
  # must satisfy the authentication requirements before they can be processed.
  #
  # supported_values: none, api_key, jwt
  #     none: no authentication is used
  #     api_key: The authentication is done using an API key added to the HTTP request header.
  #     jwt: The authentication is done using a JWT token added to the `Authorization` header. This token is
  #          generated from the secret key.
  #
  # If the type is `api_key` or `jwt`, the secret must be set by the environment variable `secret.platform_api.auth_secret`.
  # If the type is api_key, the secret will be used as the api_key.
  # If the type is jwt, the secret will be used as the jwt shared secret.
  #
  # Secrets are shared on both sides (Platform and Anchor) and are used in Platform API requests (`Anchor->Platform`)
  # so the Platform server can ensure the party making the request is the Anchor
  auth:
    # The authentication type
    type: none
    # The JWT authentication config, if the type is set to `jwt`
    jwt:
      # The JWT expiration in milliseconds
      http_header: Authorization
    # The API key config, if the type is set to `api_key`
    api_key:
      # The HTTP header name of the API key
      http_header: X-Api-Key

######################
# SEP Server Configuration
######################
sep_server:
  # The context path of the SEP server
  context_path: /
  # The listening port of the SEP server
  port: 8080
  # The management_server_port is the port used by Spring actuator.
  # https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html
  management_server_port: 9080

######################
# SEP-1 Configuration
######################
sep1:
  # Whether to enable SEP-1
  enabled: false
  # The configuration of how to respond to the `.well-known/stellar.toml` request.
  toml:
    # The `type` must be one of the following:
    #     `string`: the `value` contains the content of the stellar toml file
    #     `file`: the `value` contains the path to the stellar toml file
    #     `url`: the `value` contains the url to the stellar toml file
    type: string
    # The value of the stellar toml file depending on the `type` field.
    value:

######################
# SEP-6 Configuration
######################
sep6:
  # Whether to enable SEP-6
  enabled: false
  # Configures the more_info_url of the transaction response when calling GET /transaction and GET /transactions endpoints.
  # For details, please refer to https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0006.md#transaction-history
  #   base_uri: is the base_uri used to construct the more_info_url
  #   jwt_expiration: the timeout in seconds of the JWT returned with the embedded interactive url of the SEP-6 process.
  #       The jwt secret must be set by the environment variable: secret.sep6.more_info_url.jwt_secret
  #   txn_fields: is an optional list of transaction fields that will be appended to the jwt of the more_info url. If empty, no fields from transaction will be appended.
  #   In addition to the txn_fields, the following fields are also added to the query parameters.
  #       `transaction_id`: the transaction ID
  #       `token`: the JWT token
  more_info_url:
    base_url: http://localhost:8080/sep6/transaction/more_info
    jwt_expiration: 600
    txn_fields:
  # Configures the features flag returned by the SEP-6 /info endpoint
  # For details, please refer to https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0006.md#response-4
  features:
    account_creation: false
    claimable_balances: false
  ## @param: deposit_info_generator_type
  ## @default: self
  ## Used to choose how the SEP-6 deposit information will be generated, which includes the
  ##     deposit address, memo and memo type.
  ## @supported_values:
  ##     self: the memo and memo type are generated in the local code, and the distribution account is used for the deposit address.
  ##          When using 'self', make sure all the stellar assets has distribution account configured.
  ##     custody: the memo and memo type are generated through Custody API, for example Fireblocks, as well as the deposit address.
  ##     none: deposit address, memo and memo type should be provided by the business in PATCH/RPC request.
  #
  deposit_info_generator_type: self
  # Deadline set for the user on transaction creation.
  # This value indicates to user that they have to take this amount of minutes before transaction will automatically
  # be moved to the next status (e.g. expired). Business should handle status movement, and the Anchor Platform does
  # NOT support automatic status movement.
  # If value is zero, negative or null, no deadline is set (default behaviour)
  initial_user_deadline_seconds: -1

######################
# SEP-10 Configuration
######################
sep10:
  # Whether to enable SEP-10
  # If `enabled` is set to True, the following two secrets must be set via the environment
  # variables.
  # `secret.sep10_signing_seed`: The private key for signing challenge transactions.
  # `secret.sep10_jwt_secret`: The JWT encryption key.
  #
  enabled: false
  #
  # The `web_auth_domain` property of SEP-10. https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#response
  # The `web_auth_domain` is optional and will be set to the value of the `home_domain` or `home_domains` if it can only be translated to one domain.
  # 1) web_auth_domain is optional:
  #    Ex: home_domain: ap.stellar.org
  #    Ex: home_domains: ap.stellar.org
  # 2) web_auth_domain is required:
  #    Ex: home_domains: ap.stellar.org, sdp.stellar.org
  #    Ex: home_domains: *.sdp.stellar.org
  web_auth_domain:
  # The `home_domain` property of SEP-10. https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#request
  # `home_domain` value must be equal to the host of the toml file. If sep1 is enabled, toml file will be hosted on the SEP server.
  # This property cannot coexist with `home_domains` and is going to be deprecated. Please use `home_domains` instead.
  home_domain:
  # The `home_domains` property of SEP-10. This is a list of domains and/or wildcard patterns that the client can use to authenticate.
  # https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#request
  # This property cannot coexist with `home_domain`. Please also set web_auth_domain if you have more than one home domain in this list.
  # The following lists are examples:
  # Ex: home_domains: [ap.stellar.org, *.sdp.stellar.org]
  # Ex: home_domains: ap.stellar.org, *.sdp.stellar.org
  home_domains:
  # Set if the client attribution is required. Client Attribution requires clients to verify their identity by passing
  # a domain in the challenge transaction request and signing the challenge with the ``SIGNING_KEY`` on that domain's
  # SEP-1 stellar.toml. See the SEP-10 section `Verifying Client Application Identity` for more information
  # (https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0010.md#verifying-client-application-identity).
  #
  # If the client_attribution_required is set to true, the list of allowed clients must be configured in the `clients`
  # section of this configuration file. The `domain` field of the client must be provided.
  client_attribution_required: false
  # The list of allowed clients for the SEP-10 authentication.
  # Each item in the list must match the names of one of the client defined in the `clients` section.
  # If the list is empty, all clients defined in the `clients` section are allowed.
  # Ex: client_allow_list: [circle, lobstr]
  # Ex: client_allow_list: circle,lobstr
  client_allow_list:
  # Set the authentication challenge transaction timeout in seconds. An expired signed transaction will be rejected.
  # This is the timeout period the client must finish the authentication process. (ie: sign and respond the challenge
  # transaction).
  auth_timeout: 900
  # Set the timeout in seconds of the authenticated JSON Web Token. An expired JWT will be rejected.
  # This is the timeout period after the client has authenticated.
  jwt_timeout: 86400

######################
# SEP-12 Configuration
######################
sep12:
  # Whether to enable SEP-12
  enabled: false

######################
# SEP-24 Configuration
######################
sep24:
  # Whether to enable SEP-24.
  enabled: false
  # Configures the interactive URL where the platform server will redirect to start the SEP-24 interactive flow.
  #   base_uri: is the base_uri used to construct the interactive url
  #   txn_fields: is an optional list of transaction fields that will be appended to the jwt of the interactive url. If empty, no fields from transaction will be appended.
  #   jwt_expiration: the timeout in seconds of the JWT returned with the embedded interactive url of the SEP-24 process.
  #          The jwt secret must be set by the environment variable: secret.sep24.interactive_url.jwt_secret
  #
  #   In addition to the txn_fields, the following fields are also added to the query parameters.
  #       `transaction_id`: the transaction ID
  #       `token`: the JWT token,
  #       `data.asset`: asset requested byu the user
  #       `data.amount`: the amount requested (optional),
  #       `data.client_domain`: the client domain of the request (optional),
  #       `data.lang`: the lang request parameter (optional),
  interactive_url:
    # The base URL of the SEP-24 interactive flow
    base_url: http://localhost:8080/sep24/interactive
    # The timeout in seconds of the JWT returned with the embedded interactive URL of the SEP-24 process.
    jwt_expiration: 600
    # The list of transaction fields that will be appended to the JWT of the interactive URL
    txn_fields:
  # Configures the more_info_url of the transaction response when calling GET /transaction and GET /transactions endpoints.
  # For details, please refer to https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0024.md#shared-fields-for-both-deposits-and-withdrawals
  #   base_uri: is the base_uri used to construct the more_info_url
  #   txn_fields: is an optional list of transaction fields that will be appended to the jwt of the more_info url. If empty, no fields from transaction will be appended.
  #   jwt_expiration: the timeout in seconds of the JWT returned with the embedded interactive url of the SEP-24 process.
  #          The jwt secret must be set by the environment variable: secret.sep24.more_info_url.jwt_secret
  #   In addition to the txn_fields, the following fields are also added to the query parameters.
  #       `transaction_id`: the transaction ID
  #       `token`: the JWT token
  more_info_url:
    # The base URL of the SEP-24 more_info_url
    base_url: http://localhost:8080/sep24/transaction/more_info
    # The timeout in seconds of the JWT returned with the embedded more_info_url of the SEP-24 process.
    jwt_expiration: 600
    # The list of transaction fields that will be appended to the JWT of the more_info_url
    txn_fields:

  # Configures the features flag returned by the SEP-24 /info endpoint
  # For details, please refer to https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0024.md#response-2
  features:
    # Whether to enable the account creation feature.
    account_creation: false
    # Whether to enable the claimable balances feature.
    claimable_balances: false

  ## @param: deposit_info_generator_type
  ## @default: self
  ## Used to choose how the SEP-24 deposit information will be generated, which includes the
  ##     deposit address, memo and memo type.
  ## @supported_values:
  ##     self: the memo and memo type are generated in the local code, and the distribution account is used for the deposit address.
  ##     custody: the memo and memo type are generated through Custody API, for example Fireblocks, as well as the deposit address.
  ##     none: deposit address, memo and memo type should be provided by the business in PATCH/RPC request.
  #
  deposit_info_generator_type: self

  # When the `POST /transactions/deposit/interactive` and `POST /transactions/withdraw/interactive` are called,
  # the request may contain KYC fields. If `kyc_fields_forwarding` is enabled, the SEP server will call the
  # `PUT /customer` endpoint of the business server to create or update the KYC fields.
  kyc_fields_forwarding:
    # Whether to enable the KYC fields forwarding.
    enabled: true

  # Deadline set for the user on transaction creation.
  # This value indicates to user that they have to take this amount of minutes before transaction will automatically
  # be moved to the next status (e.g. expired). Business should handle status movement, and the Anchor Platform does
  # NOT support automatic status movement.
  # If value is zero, negative or null, no deadline is set (default behaviour)
  initial_user_deadline_seconds: -1


######################
# SEP-31 Configuration
######################
sep31:
  ## Whether to enable SEP-31
  #
  enabled: false
  # The `payment_type` must be one of the following:
  #     STRICT_SEND: amount_in = amount
  #     STRICT_RECEIVE: amount_in = amount + fee
  payment_type: STRICT_SEND
  # Used to choose how the SEP-31 deposit information will be generated, which includes the
  #     deposit address, memo and memo type.
  # The `deposit_info_generator_type` must be one of the following:
  #     self: the memo and memo type are generated in the local code, and the distribution account is used for the deposit address.
  #     custody: the memo and memo type are generated through Custody API, for example Fireblocks, as well as the deposit address.
  #     api: the memo and memo type are generated through calling the anchor's GET /unique_address endpoint.
  #
  deposit_info_generator_type: self

######################
# SEP-38 Configuration
######################
sep38:
  # Whether to enable SEP-38
  #
  enabled: false
  # Whether to enforce SEP-10 authentication for SEP-38 /info, /price, /prices endpoints.
  sep10_enforced: false

######################
## Custody Server configuration
######################
custody_server:
  # The context path of the Custody server
  context_path: /
  # The listening port of the Custody server
  port: 8086
  ## @param: baseUrl
  ## @type: string
  ## @supported_prefixes: http:, https:
  ## The base URL of the Custody server that implements the custody API endpoints
  #
  base_url: http://localhost:8086
  ## Http Client timeouts for communication with the Custody Server in SECONDS
  http_client:
    connect_timeout: 10
    read_timeout: 30
    write_timeout: 30
    call_timeout: 60
  ## Authentication config for Anchor Platform and Custody Server to safely communicate,
  ## particularly when housed in different clusters.
  ## The receiving party should verify that an incoming request token is still valid.
  #
  auth:
    ## @param: type
    ## @supported_values: none, api_key, jwt
    ##     none: no authentication is used
    ##     api_key: The authentication is done using an API key added to the HTTP request header.
    ##     jwt: The authentication is done using a JWT token added to the `Authorization` header. This token is
    ##          generated from the secret key.
    ##
    ## If the type is `api_key` or `jwt`, the secret must be set by the environment variable `secret.platform_api.auth_secret`.
    ## If the type is api_key, the secret will be used as the api_key.
    ## If the type is jwt, the secret will be used as the jwt shared secret.
    ##
    ## Secrets are shared on both sides (Platform and Anchor) and are used in CallbackAPI
    ## requests (`Platform->Anchor`) so the Anchor can ensure the party making the request
    ## is the Platform
    #
    type: none
    jwt:
      expiration_milliseconds: 30000
      http_header: Authorization
    api_key:
      http_header: X-Api-Key

custody:
  ## @param: type
  ## @supported_values: none, fireblocks
  ##    none: no integration with custody service
  ##    fireblocks: enables integration with Fireclobks custody service
  ##
  ## If the type is `fireblocks`, @required_secrets: SECRET_CUSTODY_FIREBLOCKS_API_KEY, SECRET_CUSTODY_FIREBLOCKS_SECRET_KEY
  #
  type: none
  ## Http Client timeouts for communication with custody service(fireblocks/circle/...) in SECONDS
  http_client:
    connect_timeout: 10
    read_timeout: 30
    write_timeout: 30
    call_timeout: 60
  ## Trustline check configuration. Is used only when custody integration is enabled
  trustline:
    ## @param: checkCronExpression
    ## @type: string
    ## Cron expression which defines how often trustline check job runs. By default, job runs every minute
    #
    check_cron_expression: "0 * * * * *"
    ## @param: checkDuration
    ## @type: integer
    ## Determines how long (in MINUTES) trustline will be checked. By default - 1 hour (60 minutes)
    #
    check_duration: 60
    ## @param: checkTimeoutMessage
    ## @type: string
    ## The message, that will be added to SEP transaction after check duration is exceeded
    #
    check_timeout_message: Trustline check timed out
  fireblocks:
    ## @param: baseUrl
    ## @type: string
    ## The base URL of the Fireblocks API
    #
    base_url: https://api.fireblocks.io
    ## @param: vaultAccountId
    ## @type: string
    ## Default vault account ID
    #
    vault_account_id:
    ## @param: public_key
    ## @type: string
    ## Fireblocks public key, that is used to verify a webhook signature
    #
    public_key: |

    reconciliation:
      ## @param: cronExpression
      ## @type: string
      ## Cron expression which defines how often transaction reconciliation job runs. By default, job runs every 15 minutes
      #
      cron_expression: "0 0/15 * * * *"
      ## @param: maxAttempts
      ## @type: integer
      ## Determines how many times the transaction reconciliation job will attempt to update status of the transaction before marking it as failed
      #
      max_attempts: 10

    retry_config:
      ## @param: maxAttempts
      ## @type: integer
      ## Determines how many times the Fireblocks client will attempt to send request before marking a call as failed.
      #
      max_attempts: 3
      ## @param: delay
      ## @type: integer
      ## Interval between Fireblocks client call attempts (in ms)
      #
      delay: 1000

    ## @param: assetMappings
    ## @type:  string
    ## Defines mappings of fireblocks asset codes to stellar asset codes
    ## Each mapping should be in a new line
    ## Mappings should be in a format FIREBLOCKS_ASSET_CODE STELLAR_ASSET_CODE separated with space character
    ## Example:
    ##  XLM_USDC_T_CEKS stellar:USDC:GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5
    ##  XLM_TEST stellar:native
    #
    asset_mappings: |

##########################
# Metric Configuration
##########################
# The metrics are exposed at the port specified by each server's (eg: sep, platform, event processor and observer)
# management_server_port
metrics:
  # If true, enable metrics will be enabled.
  enabled: false
  # If set, all metrics will be prefixed with the specified prefix.
  prefix:


#########################
# Events Configuration.
#########################
# The events being sent from the platform are the ones described in the `Events Schema.yml` file
events:
  # Whether to enable event delivery. If false, the events will not be sent to the event publisher.
  enabled: false

  # The configuration of the event queue.
  queue:
    # The type of the queue.
    # `type` can be one of: kafka, sqs, msk
    type: kafka
    # If the value of `events.publisher.type` is `kafka`, the `events.publisher.kafka` field must be defined.
    kafka:
      # A comma-separated list of host:port pairs that are the addresses of one or more brokers in a Kafka cluster,
      # e.g. localhost:9092 or localhost:9092,another.host:9092.
      #
      bootstrap_server: localhost:29092
      # The client ID. If left empty, it is randomly generated.
      client_id:
      # Determines how many times the producer will attempt to send a message before marking it as failed.
      retries: 1
      # Determines the time to wait before sending messages out to Kafka.
      linger_ms: 1000
      # Determines the maximum amount of data to be collected before sending the batch.
      batch_size: 10
      # Determines the maximum amount of time to wait for the batch to be filled before returning from poll().
      poll_timeout_seconds: 60
      # The security protocol used to communicate with the brokers.
      # `security_protocol` can be one of the following:
      #     `PLAINTEXT`: no encryption
      #     `SASL_PLAINTEXT`: SASL authentication with no encryption
      # If SASL_PLAINTEXT is used, the SECRET_EVENTS_QUEUE_KAFKA_USERNAME and SECRET_EVENTS_QUEUE_KAFKA_PASSWORD
      # environment variables must be set.
      security_protocol: PLAINTEXT
      # The SASL mechanism used for authentication when `security_protocol` is set to `SASL_PLAINTEXT`.
      # `sasl_mechanism` can be one of the following:
      #     `PLAIN`: PLAIN SASL mechanism
      sasl_mechanism:
    # If the value of `publisher.type` is "sqs", the `events.publisher.sqs` field must be defined.
    sqs:
      # Use IAM authentication for AWS MSK or AWS SQS.
      # SQS FIFO queues should be pre-created in AWS (Anchor Platform will not create them)
      # If true, please follow the `Set up AWS Credentials and Region for Development`
      # at https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
      use_IAM: false
      # AWS region for the queue. Can also be defined as environment variable: AWS_REGION
      aws_region: us-east-1
    # If the value of `publisher.type` is "msk", the `events.publisher.msk` field must be defined.
    msk:
      # Use IAM authentication for AWS MSK or AWS SQS.
      # SQS FIFO queues should be pre-created in AWS (Anchor Platform will not create them)
      #
      # If true, please follow the `Set up AWS Credentials and Region for Development`
      # at https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
      use_IAM: false
      # The Kafka server used to bootstrap setup in AWS
      # AWS credentials.
      # https://docs.aws.amazon.com/msk/latest/developerguide/port-info.html
      bootstrap_server: # b-1-public.democluster1.w7j4hi.c25.kafka.us-east-1.amazonaws.com:9198
      # The client ID. If left empty, it is randomly generated.
      client_id:
      # Determines how many times the producer will attempt to send a message before marking it as failed.
      retries: 1
      # Determines the time to wait before sending messages out to Kafka.
      linger_ms: 1000
      # Determines the maximum amount of data to be collected before sending the batch.
      batch_size: 10

#########################
# Assets Configuration
#########################
# Assets are empty by default.
# Accepts file reference (eg. 'file:assets.yaml') or in-line definition.
assets:
  # The type of the assets definition.
  # `type` can be one of the following:
  #     `json`: value field contains the content of the assets in JSON format
  #     `yaml`: value field contains the content of the assets in YAML format
  #     `file`: value field contains the path to the assets file. The file name can be *.json or *.yaml.
  #     `url`: value contains the url to the assets file. The file name can be *.json or *.yaml.
  type: json
  # The value of the assets definition depending on the `type` field.
  value:

################################
# Data Configuration
################################
data:
  # DB credentials are specified in @environment_variables SECRET_DATA_USERNAME, SECRET_DATA_PASSWORD

  ## @supported_values:
  ##
  ## Type of storage.
  ## If this is set to `aurora`, please follow the `Set up AWS Credentials and Region for Development`
  ## at https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
  #
  #
  # The type of the database.
  # `type` can be one of the following:
  #     `h2`: (default) in-memory database
  #     `sqlite`: sqlite database
  #     `postgres`: postgres database
  #     `aurora`: AWS Aurora database
  type: h2

  # The hostname and port of the database server.
  server:

  # Name of the database.
  database:

  # Initial number of connections
  # For `sqlite`, set this to 1 to avoid database file lock exception
  initial_connection_pool_size: 1
  # Maximum number of db active connections
  # For `sqlite`, set this to 1 to avoid database file lock exception
  max_active_connections: 10
  # The `ddl_auto` can be one of the following:
  #      `none`:	      (default) No database Schema initialization
  #      `create`:	      Drops and creates the schema at the application startup. With this option, all your data will be gone on each startup.
  #      `create-drop`:  Creates schema at the startup and destroys the schema on context closure. Useful for unit tests.
  #      `validate`:	  Only checks if the Schema matches the Entities. If the schema doesn't match, then the application startup will fail. Makes no changes to the database.
  #      `update`:	      Updates the schema only if necessary. For example, If a new field was added in an entity, then it will simply alter the table for a new column without destroying the data.
  # This value will be used to configure `spring.jpa.hibernate.ddl-auto` in non-memory databases like SQLite, Postgres, etc.
  # ATTENTION: it should not be used in production!
  ddl_auto: none
  # Whether to enable flyway.
  # Should be disabled for `sqlite` because certain features that flyway uses
  # (ex: addForeignKeyConstraint) are not supported.
  flyway_enabled: false
  # Location on disk where migrations are stored if flyway is enabled.
  #
  flyway_location: /db/migration
  # @param: flyway_baseline_on_migrate
  # @type: bool
  # Whether to enable flyway baseline on migrate. This is useful when you want to run flyway on an existing database.
  flyway_baseline_on_migrate: false

################################
## RPC Configuration
################################
rpc:
  ## Custom messages for updating transaction via RPC calls
  custom_messages:
    ## Custody transaction failed
    custody_transaction_failed: "The custody transaction has failed"
    ## Incoming payment received
    incoming_payment_received: "Received an incoming payment"
    ## Outgoing payment sent
    outgoing_payment_sent: "Outgoing payment sent"
  ## Batch size limit
  batch_size_limit: 40