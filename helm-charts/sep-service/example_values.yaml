fullName: anchor-platform
service:
   containerPort: 8080
   servicePort: 8080
   type: NodePort
   name: sep
image: 
   repo: stellar
   name: anchor-platform
   tag: latest
   pullPolicy: Always
deployment:
   replicas: 1
   startupProbePeriodSeconds: 10
   startupProbeFailureThreshold: 30
   serviceAccountName: default
   volumeMounts:
      secrets: # TODO: add your secrets here:
         - name: apsigningseed
           mountPath: signingseed 
      configMaps: # TODO: add your config maps here:
         - name: assets
           mountPath: assets
   hosts:
     - host: "<your_anchor_domain.com>"
       path: /
       pathType: Prefix
       backend:
         servicePort: "{{ .Values.service.containerPort }}"
         serviceName: "{{ .Values.fullName }}-svc-{{ .Values.service.name }}"
   annotations:
        prometheus.io/path: /actuator/prometheus
        prometheus.io/port: "8082"
        prometheus.io/scrape: "true"
   # Everything under envVars will be injected/propagated into the deployments.
   envVars:
      env:
      - name: STELLAR_ANCHOR_CONFIG
        value: file:/config/anchor-config.yaml
      envFrom:
      - secretRef:
          name: anchor-platform-secrets
      - configMapRef:
          name: "{{ .Values.fullName }}-config-env-vars"  # TODO: remember to rename this
ingress:
   labels:
     app: <appy>
     test: <label_test>
   annotations:
     kubernetes.io/ingress.class: "public"
     cert-manager.io/cluster-issuer: "default"
     ingress.kubernetes.io/ssl-redirect: "true"
     ingress.kubernetes.io/browser-xss-filter: "true"
     ingress.kubernetes.io/frame-deny: "true"
     ingress.kubernetes.io/content-type-nosniff: "true"
     ingress.kubernetes.io/hsts-max-age: "31536000"
     ingress.kubernetes.io/hsts-include-subdomains: "true"
   tls:
     host: "<your_anchor_domain.com>"
     secretName: <name-of-your-cert-secret>
   rules:
      hosts:
        - host: "<your_anchor_domain.com>"
          path: /
          pathType: Prefix
          backend:
            servicePort: "{{ .Values.service.containerPort }}"
            serviceName: "{{ .Values.fullName }}-svc-{{ .Values.service.name }}"
#
# If you want to have a dedicated stellar-observer service, you need to
# uncomment the `stellarObserver` section below.
#
# Attention! If you use the stellar observer as a separate service – by setting
# `stellarObserver.enabled` flag to `true` – you must use a shared database that
# will be accessible by both deployments (sep-server and stellar-observer).
# In-memory databases won't work.
# stellarObserver:
#    # This will enable the stellar-observer service as a separate deployment:
#    enabled: true
#    # The stellarObserver.deployment section is optional, the templates have
#    # default values.
#    deployment:
#       port: 8083
#       probePath: "/health"
#       probePeriodSeconds: 15
#       initialDelaySeconds: 60
#       startupProbeFailureThreshold: 10
#       livenessProbeFailureThreshold: 2
#    ingress:
#       tls:
#          host: "<observer.your_anchor_domain.com>"    # Replace this with a valid host name
#       rules:
#          hosts:
#          - host: "<observer.your_anchor_domain.com>"  # Replace this with a valid host name
#            path: /
#            pathType: Prefix
#
# The following configurations (`app_config`, `toml_config`, and `assets_config`)
# will be used to configure the app(s) (both sep-server and stellar-observer).
app_config:
  version: 1
  #
  # Database (h2):
  data.type: h2
  #
  # Database (PostgreSQL):
  # data.type: postgres
  # data.url: jdbc:postgresql://<host>:<port>/<database_name>
  # data.username: POSTGRES_USERNAME  # TODO: use secrets
  # data.password: POSTGRES_PASSWORD  # TODO: use secrets
  # data.initial_connection_pool_size: 3
  # data.max_active_connections: 10
  # data.flyway_enabled: true
  # data.ddl_auto: update
  # data.flyway_location: /db/migration
  #
  host_url: https://<your_anchor_domain.com>
  stellar_network.network: TESTNET
  stellar_network.network_passphrase: Test SDF Network ; September 2015
  stellar_network.horizon_url: https://horizon-testnet.stellar.org
  callback_api.base_url: https://<your_anchor_domain.com>
  callback_api.auth.type: JWT_TOKEN
  platform_api.auth.type: JWT_TOKEN
  payment_observer.enabled: false
  languages: en
  sep1.enabled: true
  # `sep1.toml.value` is being set by the helm chart from `toml_config`.
  sep10.enabled: true
  sep10.home_domain: <your_anchor_domain.com>
  sep12.enabled: true
  sep24.enabled: false
  sep31.enabled: true
  sep31.payment_type: STRICT_SEND
  sep31.deposit_info_generator_type: api
  sep38.enabled: true
  metrics.enabled: true
  metrics.extras_enabled: true
  metrics.run_interval: 30
  # Events (kafka):
  events.enabled: true
  events.event_type_to_queue.quote_created: preview-id_ap_event_quote_created
  events.event_type_to_queue.transaction_created: preview-id_ap_event_transaction_created
  events.event_type_to_queue.transaction_status_changed: preview-id_ap_event_transaction_status_changed
  events.event_type_to_queue.transaction_error: preview-id_ap_event_transaction_error
  events.publisher.type: kafka
  events.publisher.kafka.bootstrap_server: <kafka-host>:<kafka-port>
  events.publisher.kafka.client_id:
  events.publisher.kafka.retries: 1
  events.publisher.kafka.linger_ms: 1000
  events.publisher.kafka.batch_size: 10
  assets.type: json
  # `assets.value` is being set by the helm chart from `assets_config`.

toml_config: |
  ACCOUNTS = []
  VERSION = "0.1.0"
  NETWORK_PASSPHRASE = "Test SDF Network ; September 2015"
  SIGNING_KEY = "GDZCLP2PHTWYQ3BWZMC5D4ZUJX5NU4S7YZHC5EBFAFKL6UJUQ5RKDGSY"
  WEB_AUTH_ENDPOINT = "https://<your_anchor_domain.com>/auth"
  KYC_SERVER = "https://<your_anchor_domain.com>/sep12"
  DIRECT_PAYMENT_SERVER = "https://<your_anchor_domain.com>/sep31"
  ANCHOR_QUOTE_SERVER = "https://<your_anchor_domain.com>//sep38"
  
  [[CURRENCIES]]
  code = "USDC"
  issuer = "GDQOE23CFSUMSVQK4Y5JHPPYK73VYCNHZHA7ENKCV37P6SUEO6XQBKPP"
  status = "test"
  is_asset_anchored = true
  anchor_asset_type = "fiat"
  desc = "A test USDC issued by Circle."
  
  [DOCUMENTATION]
  ORG_NAME = "<Your org name>"
  ORG_URL = "https://<your_anchor_domain.com>"
  ORG_DESCRIPTION = "<Your org description>"
  ORG_SUPPORT_EMAIL="<your-support-email@<your_anchor_domain.com>"

assets_config: |
  {
    "assets": [
      {
        "schema": "stellar",
        "code": "USDC",
        "issuer": "GA5ZSEJYB37JRC5AVCIA5MOP4RHTM335X2KGX3IHOJAPP5RE34K4KZVN",
        "distribution_account": "GBJDTHT4562X2H37JMOE6IUTZZSDU6RYGYUNFYCHVFG3J4MYJIMU33HK",
        "significant_decimals": 2,
        "deposit" : {
          "enabled": true,
          "fee_minimum": 0,
          "fee_percent": 0,
          "min_amount": 0,
          "max_amount": 10000
        },
        "withdraw": {
          "enabled": true,
          "fee_fixed": 0,
          "fee_percent": 0,
          "min_amount": 0,
          "max_amount": 10000
        },
        "send": {
          "fee_fixed": 0,
          "fee_percent": 0,
          "min_amount": 0,
          "max_amount": 10000
        }
      }
    ]
  }

