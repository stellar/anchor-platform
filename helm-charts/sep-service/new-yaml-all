---
# Source: sep/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: anchor-platform-sep-server-preview-id-assets
data:
  assets.json: |
    {
      "assets":     [
      {
        "code": "USDC",
        "deposit": {
          "enabled": true,
          "fee_minimum": 0,
          "fee_percent": 0,
          "max_amount": 1000000,
          "min_amount": 0
        },
        "distribution_account": "GBN4NNCDGJO4XW4KQU3CBIESUJWFVBUZPOKUZHT7W7WRB7CWOA7BXVQF",
        "issuer": "GDQOE23CFSUMSVQK4Y5JHPPYK73VYCNHZHA7ENKCV37P6SUEO6XQBKPP",
        "schema": "stellar",
        "send": {
          "fee_fixed": 0,
          "fee_percent": 0,
          "max_amount": 1000000,
          "min_amount": 0
        },
        "sep24_enabled": true,
        "sep31": {
          "fields": {
            "transaction": {
              "receiver_account_number": {
                "description": "bank account number of the destination"
              },
              "receiver_routing_number": {
                "description": "routing number of the destination bank account"
              },
              "type": {
                "choices": [
                  "SEPA",
                  "SWIFT"
                ],
                "description": "type of deposit to make"
              }
            }
          },
          "quotes_required": false,
          "quotes_supported": true,
          "sep12": {
            "receiver": {
              "types": {
                "sep31-foreign-receiver": {
                  "description": "non-U.S. citizens receiving USD"
                },
                "sep31-receiver": {
                  "description": "U.S. citizens receiving USD"
                }
              }
            },
            "sender": {
              "types": {
                "sep31-foreign-sender": {
                  "description": "non-U.S. citizens sending payments of less than $10,000 in value"
                },
                "sep31-large-sender": {
                  "description": "U.S. citizens that do not have sending limits"
                },
                "sep31-sender": {
                  "description": "U.S. citizens limited to sending payments of less than $10,000 in value"
                }
              }
            }
          }
        },
        "sep31_enabled": true,
        "sep38": {
          "exchangeable_assets": [
            "iso4217:USD"
          ]
        },
        "sep38_enabled": true,
        "significant_decimals": 2,
        "withdraw": {
          "enabled": true,
          "fee_fixed": 0,
          "fee_percent": 0,
          "max_amount": 1000000,
          "min_amount": 0
        }
      },
      {
        "code": "JPYC",
        "deposit": {
          "enabled": true,
          "fee_minimum": 0,
          "fee_percent": 0,
          "max_amount": 1000000,
          "min_amount": 0
        },
        "distribution_account": "GBN4NNCDGJO4XW4KQU3CBIESUJWFVBUZPOKUZHT7W7WRB7CWOA7BXVQF",
        "issuer": "GDQOE23CFSUMSVQK4Y5JHPPYK73VYCNHZHA7ENKCV37P6SUEO6XQBKPP",
        "schema": "stellar",
        "send": {
          "fee_fixed": 0,
          "fee_percent": 0,
          "max_amount": 1000000,
          "min_amount": 0
        },
        "sep24_enabled": false,
        "sep31": {
          "fields": {
            "transaction": {
              "receiver_account_number": {
                "description": "bank account number of the destination"
              },
              "receiver_routing_number": {
                "description": "routing number of the destination bank account"
              },
              "type": {
                "choices": [
                  "SEPA",
                  "SWIFT"
                ],
                "description": "type of deposit to make"
              }
            }
          },
          "quotes_required": false,
          "quotes_supported": true,
          "sep12": {
            "receiver": {
              "types": {
                "sep31-foreign-receiver": {
                  "description": "non-U.S. citizens receiving JPY"
                },
                "sep31-receiver": {
                  "description": "U.S. citizens receiving JPY"
                }
              }
            },
            "sender": {
              "types": {
                "sep31-foreign-sender": {
                  "description": "non-U.S. citizens sending payments of less than $10,000 in value"
                },
                "sep31-large-sender": {
                  "description": "U.S. citizens that do not have sending limits"
                },
                "sep31-sender": {
                  "description": "U.S. citizens limited to sending payments of less than $10,000 in value"
                }
              }
            }
          }
        },
        "sep31_enabled": true,
        "sep38": {
          "exchangeable_assets": [
            "iso4217:USD"
          ]
        },
        "sep38_enabled": true,
        "significant_decimals": 4,
        "withdraw": {
          "enabled": true,
          "fee_fixed": 0,
          "fee_percent": 0,
          "max_amount": 1000000,
          "min_amount": 0
        }
      },
      {
        "code": "USD",
        "deposit": {
          "enabled": true,
          "fee_minimum": 0,
          "fee_percent": 0,
          "max_amount": 10000,
          "min_amount": 1
        },
        "schema": "iso4217",
        "send": {
          "fee_fixed": 0,
          "fee_percent": 0,
          "max_amount": 10000,
          "min_amount": 1
        },
        "sep24_enabled": false,
        "sep31_enabled": false,
        "sep38": {
          "buy_delivery_methods": [
            {
              "description": "Have USD sent directly to your bank account.",
              "name": "WIRE"
            }
          ],
          "country_codes": [
            "USA"
          ],
          "decimals": 4,
          "exchangeable_assets": [
            "stellar:USDC:GDQOE23CFSUMSVQK4Y5JHPPYK73VYCNHZHA7ENKCV37P6SUEO6XQBKPP",
            "stellar:JPYC:GDQOE23CFSUMSVQK4Y5JHPPYK73VYCNHZHA7ENKCV37P6SUEO6XQBKPP"
          ],
          "sell_delivery_methods": [
            {
              "description": "Send USD directly to the Anchor's bank account.",
              "name": "WIRE"
            }
          ]
        },
        "sep38_enabled": true,
        "withdraw": {
          "enabled": false,
          "fee_fixed": 0,
          "fee_percent": 0,
          "max_amount": 10000,
          "min_amount": 1
        }
      }
    ]
    }
---
# Source: sep/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: anchor-platform-sep-server-preview-id
data:
  # TODO: remove all secrets (ex: move to env vars, k8s secrets, vault, etc...)
  anchor-config.yaml: |
    stellar:
      anchor:
        config: in-memory
        app-config:
          type: config-spring-property # Activate [config-spring-property] module
          settings: app-config  # The location of the configuration data 
        data-access:
          type: data-spring-jdbc # Activate [config-spring-jdbc] module.
          settings: data-spring-jdbc-sqlite  # The location of the configuration data in this file.
        logging:
          type: logging-logback
          settings: logging-logback-settings
    app-config:
      app:
        stellarNetwork: TESTNET 
        stellarNetworkPassphrase: Test SDF Network ; September 2015 
        horizonUrl: https://horizon-testnet.stellar.org
        hostUrl: https://anchor-sep-preview-id.previews.kube001.services.stellar-ops.com
        languages: en
        assets: file:/assets/assets.json
        jwtSecretKey: ${JWT_SECRET}
      integration-auth:
        authType: JWT_TOKEN
        platformToAnchorSecret: ${PLATFORM_TO_ANCHOR_SECRET}
        anchorToPlatformSecret: ${ANCHOR_TO_PLATFORM_SECRET}
        expirationMilliseconds: 30000      
      # The anchor callback configuration
      anchor-callback:
        # The CallbackAPI endpoint
        endpoint: https://anchor-ref-preview-id.previews.kube001.services.stellar-ops.com
      # sep-1
      sep1:
        enabled: true
        stellarFile: file:/config/stellar-wks.toml
      # sep-10
      sep10:
        enabled: true
        homeDomain: anchor-sep-preview-id.previews.kube001.services.stellar-ops.com
        clientAttributionRequired: false
        clientAttributionAllowList: lobstr.co,preview.lobstr.co
        # clientAttributionDenyList: # use this if we want to black list.
        authTimeout: 900
        jwtTimeout: 86400
        signingSeed: ${SEP10_SIGNING_SEED} 
        requireKnownOmnibusAccount: false
      # sep-12
      sep12:
        enabled: true
        customerIntegrationEndpoint: https://anchor-ref-preview-id.previews.kube001.services.stellar-ops.com
      # sep-24
      sep24:
        enabled: false
        interactiveJwtExpiration: 3600
        interactiveUrl: https://anchor-ref-preview-id.previews.kube001.services.stellar-ops.com
      # sep-31
      sep31:
        enabled: true
        feeIntegrationEndPoint: https://anchor-ref-preview-id.previews.kube001.services.stellar-ops.com
        uniqueAddressIntegrationEndPoint: https://anchor-ref-preview-id.previews.kube001.services.stellar-ops.com
        depositInfoGeneratorType: api
        paymentType: STRICT_SEND
      # sep-38
      sep38:
        enabled: true
        quoteIntegrationEndPoint: https://anchor-ref-preview-id.previews.kube001.services.stellar-ops.com
      circle:
        circleUrl: https://api-sandbox.circle.com
        apiKey: ${CIRCLE_API_KEY}
      payment-gateway:
        circle:
          name: circle
          enabled: true
        stellar:
          enabled: false
          name: stellar
          horizonUrl: https://horizon-testnet.stellar.org
          secretKey:  ${PAYMENT_GATEWAY_STELLAR_SECRET_KEY} # stellar account secret key
      circle-payment-observer:
        enabled: true
        horizonUrl: https://horizon-testnet.stellar.org
        stellarNetwork: TESTNET
        trackedWallet: all
      event: 
        # If enabled, publish Events to a queue (publisherType)
        # publisherType - the type of queue to use for event publishing
        enabled: true
        publisherType: kafka
      metrics-service:
        optionalMetricsEnabled: false   # optional metrics that periodically query the database
        runInterval: 30                 # interval to query the database to generate the optional metrics
      kafka.publisher:
        bootstrapServer: anchor-platform-kafka.anchor-platform-dev.svc.cluster.local:9092
        useIAM: false
        useSingleQueue: false
        eventTypeToQueue:
          all: preview-id_ap_event_single_queue
          quoteCreated: preview-id_ap_event_quote_created
          transactionCreated: preview-id_ap_event_transaction_created
          transactionStatusChanged: preview-id_ap_event_transaction_status_changed
          transactionError: preview-id_ap_event_transaction_error
    data-spring-jdbc-sqlite:
      spring.datasource.driver-class-name: org.sqlite.JDBC
      spring.datasource.initial-size: 1
      spring.datasource.max-active: 1
      spring.datasource.password: ${SQLITE_PASSWORD}
      spring.datasource.url: jdbc:sqlite:anchor-proxy.db
      spring.datasource.username: ${SQLITE_USERNAME}
      spring.jpa.database-platform: org.stellar.anchor.platform.sqlite.SQLiteDialect
      spring.jpa.generate-ddl: true
      spring.jpa.hibernate.ddl-auto: update
      spring.jpa.hibernate.show_sql: false
      spring.mvc.converters.preferred-json-mapper: gson
    spring:
      logging:
        level:
          root: INFO
          org.springframework: INFO
          org.springframework.web.filter: INFO
          org.stellar: INFO
      mvc:
        async.request-timeout: 6000
  stellar-wks.toml: |
    ACCOUNTS = ["GDZCLP2PHTWYQ3BWZMC5D4ZUJX5NU4S7YZHC5EBFAFKL6UJUQ5RKDGSY"]
    VERSION = "0.1.0"
    NETWORK_PASSPHRASE = "Test SDF Network ; September 2015"
    SIGNING_KEY = "GDZCLP2PHTWYQ3BWZMC5D4ZUJX5NU4S7YZHC5EBFAFKL6UJUQ5RKDGSY"
    TRANSFER_SERVER = "https://anchor-sep-preview-id.previews.kube001.services.stellar-ops.com/sep6"
    TRANSFER_SERVER_SEP0024 = "https://anchor-sep-preview-id.previews.kube001.services.stellar-ops.com/sep24"
    WEB_AUTH_ENDPOINT = "https://anchor-sep-preview-id.previews.kube001.services.stellar-ops.com/auth"
    KYC_SERVER = "https://anchor-sep-preview-id.previews.kube001.services.stellar-ops.com/sep12"
    DIRECT_PAYMENT_SERVER = "https://anchor-sep-preview-id.previews.kube001.services.stellar-ops.com/sep31"
    ANCHOR_QUOTE_SERVER = "https://anchor-sep-preview-id.previews.kube001.services.stellar-ops.com/sep38"
    
    [[CURRENCIES]]
    code = "USDC"
    issuer = "GDQOE23CFSUMSVQK4Y5JHPPYK73VYCNHZHA7ENKCV37P6SUEO6XQBKPP"
    status = "test"
    is_asset_anchored = true
    anchor_asset_type = "fiat"
    desc = "A test USDC issued by Circle."
    
    [DOCUMENTATION]
    ORG_NAME = "Stellar Development Foundation"
    ORG_URL = "https://www.stellar.org"
    ORG_DESCRIPTION = "Stellar is an open network for storing and moving money."
    ORG_LOGO = "https://assets-global.website-files.com/5deac75ecad2173c2ccccbc7/5dec8960504967fd31147f62_Stellar_lockup_black_RGB.svg"
    ORG_SUPPORT_EMAIL = "jamie@stellar.org"
---
# Source: sep/templates/service.yaml
# SEP Server
apiVersion: v1
kind: Service
metadata:
  name: anchor-platform-sep-server-preview-id-svc-sep-server-preview-id
  labels:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id
    helm.sh/chart: sep-0.3.90
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 8080       # port number the service will listen on
    targetPort: 8080  # port number pods listen on
  selector:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id


# Stellar Observer
---
# Source: sep/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: anchor-platform-sep-server-preview-id-svc-sep-server-preview-id-observer
  labels:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id-observer
    helm.sh/chart: sep-0.3.90
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 8083         # port number the service will listen on
    targetPort: 8083  # port number pods listen on
  selector:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id-observer
---
# Source: sep/templates/deployment.yaml
# SEP Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: anchor-platform-sep-server-preview-id
  labels:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id
    helm.sh/chart: sep-0.3.90
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 
  selector:
    matchLabels:
      app.kubernetes.io/name: anchor-platform-sep-server-preview-id
  template:
    metadata:
      labels:
        app.kubernetes.io/name: anchor-platform-sep-server-preview-id
        app.kubernetes.io/instance: release-name
      annotations:
          prometheus.io/path: "/actuator/prometheus"
          prometheus.io/port: "8082"
          prometheus.io/scrape: "true"
    spec:
      containers:
        - name: sep
          image: "docker-registry.services.stellar-ops.com/dev/anchor-platform-preview:preview-id"
          args: ["--sep-server"]
          imagePullPolicy: Always
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            failureThreshold: 10
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            failureThreshold: 2
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 3
          volumeMounts:
            - name: sep-config-volume
              mountPath: /config
              readOnly: true
            - mountPath: assets
              name: anchor-platform-sep-server-preview-id-assets-volume
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: metrics
            containerPort: 8082
            protocol: TCP
          env:
            - name: STELLAR_ANCHOR_CONFIG
              value: file:/config/anchor-config.yaml
          envFrom:
            - secretRef:
                name: anchor-platform-secret-common-previews     
      volumes:
        - name: sep-config-volume
          configMap:
            name: anchor-platform-sep-server-preview-id
        - name: anchor-platform-sep-server-preview-id-assets-volume
          configMap:
            name: anchor-platform-sep-server-preview-id-assets

# Stellar Observer---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: anchor-platform-sep-server-preview-id-observer
  labels:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id-observer
    helm.sh/chart: sep-0.3.90
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: anchor-platform-sep-server-preview-id-observer
  template:
    metadata:
      labels:
        app.kubernetes.io/name: anchor-platform-sep-server-preview-id-observer
        app.kubernetes.io/instance: release-name
      annotations:
          prometheus.io/path: "/actuator/prometheus"
          prometheus.io/port: "8082"
          prometheus.io/scrape: "true"
    spec:
      containers:
        - name: sep-observer
          image: "docker-registry.services.stellar-ops.com/dev/anchor-platform-preview:preview-id"
          args: ["--stellar-observer"]
          imagePullPolicy: Always
          startupProbe:
            httpGet:
              path: /health
              port: 8083
            failureThreshold: 10
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 60
            failureThreshold: 2
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 60
            periodSeconds: 15
          volumeMounts:
            - name: sep-config-volume
              mountPath: /config
              readOnly: true
            - mountPath: assets
              name: anchor-platform-sep-server-preview-id-assets-volume
          ports:
          - name: http
            containerPort: 8083
            protocol: TCP
          env:
            - name: STELLAR_ANCHOR_CONFIG
              value: file:/config/anchor-config.yaml
          envFrom:
            - secretRef:
                name: anchor-platform-secret-common-previews     
      volumes:
        - name: sep-config-volume
          configMap:
            name: anchor-platform-sep-server-preview-id
        - name: anchor-platform-sep-server-preview-id-assets-volume
          configMap:
            name: anchor-platform-sep-server-preview-id-assets
---
# Source: sep/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: anchor-platform-sep-server-preview-id-ing-sep-server-preview-id
  annotations:
    fluxcd.io/ignore: "true"
    ingress.kubernetes.io/browser-xss-filter: "true"
    ingress.kubernetes.io/content-type-nosniff: "true"
    ingress.kubernetes.io/frame-deny: "true"
    ingress.kubernetes.io/hsts-include-subdomains: "true"
    ingress.kubernetes.io/hsts-max-age: "31536000"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: "public"
  labels:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id-ing-sep-server-preview-id
    helm.sh/chart: sep-0.3.90
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm  
spec:
  tls:
  - hosts:
    - anchor-sep-preview-id.previews.kube001.services.stellar-ops.com
    secretName: star.previews.kube001.services.stellar-ops.com.tls
  rules:
  - host: anchor-sep-preview-id.previews.kube001.services.stellar-ops.com
    http:
      paths:
        - path: /
          pathType: "Prefix"
          backend:
            service:
              name: anchor-platform-sep-server-preview-id-svc-sep-server-preview-id
              port:
                number: 8080

# Stellar Observer
---
# Source: sep/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: anchor-platform-sep-server-preview-id-ing-sep-server-preview-id-observer
  annotations:
    fluxcd.io/ignore: "true"
    ingress.kubernetes.io/browser-xss-filter: "true"
    ingress.kubernetes.io/content-type-nosniff: "true"
    ingress.kubernetes.io/frame-deny: "true"
    ingress.kubernetes.io/hsts-include-subdomains: "true"
    ingress.kubernetes.io/hsts-max-age: "31536000"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: "public"
  labels:
    app.kubernetes.io/name: anchor-platform-sep-server-preview-id-ing-sep-server-preview-id-observer
    helm.sh/chart: sep-0.3.90
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm  
spec:
  tls:
  - hosts:
    - anchor-sep-preview-id-observer.previews.kube001.services.stellar-ops.com
    secretName: star.previews.kube001.services.stellar-ops.com.tls
  rules:
  - host: anchor-sep-preview-id-observer.previews.kube001.services.stellar-ops.com
    http:
      paths:
        - path: /
          pathType: "Prefix"
          backend:
            service:
              name: anchor-platform-sep-server-preview-id-svc-sep-server-preview-id-observer
              port:
                number: 8083
---
# Source: sep/templates/ingress.yaml
# SEP Server