name: Release Published

on:
  workflow_dispatch:
  pull_request:
  release:
    types: [ created, edited ]

jobs:
  check_release_tag:
    runs-on: ubuntu-latest
    name: Validate Release Tag
    steps:
      - name: Get EXPECTED_RELEASE_TAG
        shell: bash
        run: echo "EXPECTED_RELEASE_TAG=$(./gradlew -q printVersionName)" >> "$GITHUB_ENV"
      - name: Fail if the release version and the project version do not match
        if: ${{ github.event.release.tag_name != env.EXPECTED_RELEASE_TAG }}
        run: |
          echo "The release tag is invalid: [${{ github.event.release.tag_name }}]"
          echo "The expected release tag is: [${{ env.EXPECTED_RELEASE_TAG }}]"
          echo "The release tag must match project version."
          exit 1  

  build_and_push_docker_image_amd64:
    name: Push to DockerHub (tag=stellar/anchor-platform:${{ github.event.release.tag_name }}) - AMD64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Enable multi-arch emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Use a Buildx builder with the docker-container driver (required for --platform)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest

      - name: Get EXPECTED_RELEASE_TAG
        shell: bash
        run: echo "EXPECTED_RELEASE_TAG=$(./gradlew -q printVersionName)" >> "$GITHUB_ENV"

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images - AMD64
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
#          push: true
          # Optional but often useful to quiet SBOM/provenance warnings on multi-arch
          provenance: false
          platforms: linux/amd64
          #          platforms: linux/amd64,linux/arm64
          tags: |
            stellar/anchor-platform:${{ env.EXPECTED_RELEASE_TAG }}
            stellar/anchor-platform:latest
          # Optional: add build cache for faster rebuilds
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_and_push_docker_image_arm64:
    name: Push to DockerHub (tag=stellar/anchor-platform:${{ github.event.release.tag_name }}) - ARM64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Enable multi-arch emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Use a Buildx builder with the docker-container driver (required for --platform)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest

      - name: Get EXPECTED_RELEASE_TAG
        shell: bash
        run: echo "EXPECTED_RELEASE_TAG=$(./gradlew -q printVersionName)" >> "$GITHUB_ENV"

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images - ARM64
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          #          push: true
          # Optional but often useful to quiet SBOM/provenance warnings on multi-arch
          provenance: false
          platforms: linux/arm64
          #          platforms: linux/amd64,linux/arm64
          tags: |
            stellar/anchor-platform:${{ env.EXPECTED_RELEASE_TAG }}
            stellar/anchor-platform:latest


  complete:
    if: always()
    needs: [ build_and_push_docker_image_amd64, build_and_push_docker_image_arm64, check_release_tag ]
    runs-on: ubuntu-latest
    steps:
      - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
