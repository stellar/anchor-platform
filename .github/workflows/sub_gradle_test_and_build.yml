name: Gradle Build and Test

on:
  # allows this workflow to be called from another workflow
  workflow_dispatch:
  workflow_call:

jobs:
  gradle_test_and_build:
    name: Gradle Test and Build
    runs-on: ubuntu-22.04
    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # This is to add to DNS entries to access the services started by docker-compose.
      # This should be deprecated. Refer to: https://stackoverflow.com/questions/47762339/how-to-correctly-set-up-docker-network-to-use-localhost-connection/47763442#47763442
      - name: Set up hostnames (/etc/hosts)
        run: |
          sudo echo "127.0.0.1 db" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 zookeeper" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 kafka" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 reference-server" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 sep24-reference-ui" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 platform" | sudo tee -a /etc/hosts
          sudo echo "127.0.0.1 host.docker.internal" | sudo tee -a /etc/hosts 


      - name: Build and run the stack with docker compose
        env:
          TEST_PROFILE_NAME: default
        run: docker-compose -f service-runner/src/main/resources/docker-compose-test.yaml up -d --build

      # Check the docker containers
      - name: Check running containers
        run: docker ps

      # Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      # Gradle test is now printing the test messages to GitHub Actions log.
      # It is not necessary to print the reports.
      - name: Gradle test and build. (unit tests, integration tests, end-2-end tests and build)
        env:
          run_docker: false
        run: ./gradlew clean build --no-daemon --stacktrace

      - name: Stop docker containers
        env:
          TEST_PROFILE_NAME: default
        run: docker-compose -f service-runner/src/main/resources/docker-compose-test.yaml down

      - name: Start docker containers
        env:
          TEST_PROFILE_NAME: default
        run: docker-compose -f service-runner/src/main/resources/docker-compose-test.yaml up -d

      - name: Run sep server, observer, java reference server and kotlin reference server
        env:
          run_docker: false
          SEP1_TOML_VALUE: service-runner/src/main/resources/config/stellar.host.docker.internal.toml
          SEP10_HOME_DOMAIN: host.docker.internal:8080
        run: |
          pwd
          cp service-runner/build/libs/anchor-platform-runner-*.jar service-runner/build/libs/anchor-platform-runner.jar
          java -jar service-runner/build/libs/anchor-platform-runner.jar -t &

      - name: Wait for sep server to start and get ready
        uses: mydea/action-wait-for-api@v1
        with:
          url: "http://localhost:8080/.well-known/stellar.toml"
          expected-status: "200"
          timeout: "300"
          interval: "1"

      - name: Run Stellar validation tool
        run: |
          docker run --network host -v ${GITHUB_WORKSPACE}/platform/src/test/resources://config stellar/anchor-tests:v0.5.12 --home-domain http://host.docker.internal:8080 --seps 1 10 12 24 31 38 --sep-config //config/stellar-anchor-tests-sep-config.json

  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java', 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"