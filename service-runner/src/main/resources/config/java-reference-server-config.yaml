server:
  servlet:
    context-path: /
    port: 8081

#
# The settings of the anchor reference serer
#
anchor.settings:
  version: 0.0.1
  platformApiEndpoint: http://localhost:8085

  # The URL where the anchor reference server can be accessed by the platform.
  hostUrl: http://localhost:8081

  # The Stellar wallet to which the customer will send the Stellar assets.
  distributionWallet: GBN4NNCDGJO4XW4KQU3CBIESUJWFVBUZPOKUZHT7W7WRB7CWOA7BXVQF
  distributionWalletMemo:
  distributionWalletMemoType:

# These are secrets shared between Anchor and Platform that are used to safely communicate from `Platform->Anchor`
# and `Anchor->Platform`, specially when they are in different clusters.
#
# When the receiving part decodes the incoming request token, it needs to verify if the token is still valid (and not expired).
integration-auth:
  authType: none
  platformToAnchorSecret: myPlatformToAnchorSecret
  anchorToPlatformSecret: myAnchorToPlatformSecret
  expirationMilliseconds: 30000


event:
  # The listener type. values: [kafka, sqs, amqp]
  # If the listener is kafka, the kafka listener is configured in kafka.listener section.
  # If the listener is sqs, the sqs listener is configured in the sqs.listener section.
  # If the listener is amqp, the AMQP listener is configured in the ampq.listener section.
  listenerType: kafka

# NOTE: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables need to be set if using AWS MSK
kafka.listener:
  enabled: true
  bootstrapServer: kafka:29092
  #bootstrapServer: b-1-public.democluster1.w7j4hi.c25.kafka.us-east-1.amazonaws.com:9198   # AWS MSK broker example
  useSingleQueue: false
  useIAM: false   # IAM authentication for AWS MSK
  eventTypeToQueue:
    all: ap_event_single_queue
    quoteCreated: ap_event_quote_created
    transactionCreated: ap_event_transaction_created
    transactionStatusChanged: ap_event_transaction_status_changed
    transactionError: ap_event_transaction_error

amqp.listener:
  endpoint: localhost:5672
#
# Spring Data JDBC settings for H2
#
spring.datasource.url: jdbc:h2:mem:test
spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.H2Dialect
spring.flyway.enabled: false

# force gson as serializer/deserializer over jackson
spring.mvc.converters.preferred-json-mapper: gson